# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: albums-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"


provider:
  name: aws
  runtime: dotnetcore2.1
  environment:
    ALBUMS_TABLE: ${self:custom.albumsTable}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:DescribeLogGroups",
        - logs:DescribeLogStreams",
        - logs:PutLogEvents",
        - logs:GetLogEvents",
        - logs:FilterLogEvents"
      Resource: 
      - arn:aws:logs:*:*:*      
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "*"
    - Effect: "Allow"
      Action: 
       - lambda:RemovePermission
      Resource: "*"
# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  logs:
    restApi: true
  tracing:
    apiGateway: true
    lambda: true  

package:
  individually: true

custom:
  PHOTO_ALBUMS_BUCKET: ygubbay-photo-albums
  PHOTO_THUMBNAILS_BUCKET: ygubbay-photo-albums-thumbnails
  albumsTable: albums-table-${self:provider.stage}

functions:

  getAlbums:
    handler: CsharpHandlers::PhotoAlbum.Functions::GetAlbums
    package:
      artifact: bin\release\netcoreapp2.1\deploy-package.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
        - "dynamodb:*"
        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource: AlbumsTable
    environment:
      tableName: ${self:custom.albumsTable}
    events: 
      - http:
          method: GET
          path: /albums
          cors:
            origins: '*'
            allowCredentials: true
          authorizer:
            type: aws_iam   

  getAlbum:
    handler: CsharpHandlers::PhotoAlbum.Functions::GetAlbum
    package:
      artifact: bin\release\netcoreapp2.1\deploy-package.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
        - "dynamodb:*"
        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource: AlbumsTable
    environment:
      tableName: ${self:custom.albumsTable}
    events: 
      - http:
          method: GET
          path: /album/{PartitionKey}
          cors:
            origins: '*'
            allowCredentials: true
          authorizer:
            type: aws_iam
  getPhotos:
    handler: CsharpHandlers::PhotoAlbum.Functions::GetPhotos
    package:
      artifact: bin\release\netcoreapp2.1\deploy-package.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
        - "dynamodb:*"
        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource: AlbumsTable
    environment:
      tableName: ${self:custom.albumsTable}
    events: 
      - http:
          method: GET
          path: /uploads/{PartitionKey}
          cors:
            origins: '*'
            allowCredentials: true
          authorizer:
            type: aws_iam            
  addUpload:
    handler: CsharpHandlers::PhotoAlbum.Functions::AddUpload
    package:
      artifact: bin\release\netcoreapp2.1\deploy-package.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
        - "dynamodb:*"
        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource: AlbumsTable
    environment:
      albums_bucket: ${self:custom.PHOTO_ALBUMS_BUCKET}
      tableName: ${self:custom.albumsTable}
    events: 
      - http:
          method: POST
          path: /uploads
          cors:
            origins: '*'
            allowCredentials: true
          authorizer:
            type: aws_iam   

  createAlbum:
    handler: CsharpHandlers::PhotoAlbum.Functions::CreateAlbum
    package:
      artifact: bin\release\netcoreapp2.1\deploy-package.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
        - "dynamodb:*"
        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource: AlbumsTable
    environment:
      tableName: ${self:custom.albumsTable}
    events: 
      - http:
          method: POST
          path: /albums
          cors:
            origins: '*'
            allowCredentials: true
          authorizer:
            type: aws_iam   

  hello:
    handler: CsharpHandlers::PhotoAlbum.Functions::Hello
    package:
      artifact: bin\release\netcoreapp2.1\deploy-package.zip

  autothumbnail:
    handler: CsharpHandlers::PhotoAlbum.Functions::AutoThumbnail
    package:
      artifact: bin\release\netcoreapp2.1\deploy-package.zip
    iamRoleStatements:
    - Effect: Allow
      Action:
      - logs:PutLogEvents
      Resource: 
      - arn:aws:logs:*:*:*
    - Effect: "Allow"
      Action:
          - "s3:*"
      Resource: "*"
    environment:
      albums_bucket: ${self:custom.PHOTO_ALBUMS_BUCKET}
      thumbnails_bucket: ${self:custom.PHOTO_THUMBNAILS_BUCKET}
    events:
      - s3:
          bucket: ${self:custom.PHOTO_ALBUMS_BUCKET}
          event: s3:ObjectCreated:*
          existing: true

resources:    
  # API Gateway Errors
  #- ${file(resources/api-gateway-errors.yml)}

  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
#    AlbumsTable:
#      Type: AWS::DynamoDB::Table
#      DeletionPolicy: Retain
#      Properties:
#        TableName: ${self:custom.albumsTable}
#        AttributeDefinitions:
#          - AttributeName: partition_key
#            AttributeType: S
#          - AttributeName: sort_key
#            AttributeType: S
#        KeySchema:
#          - AttributeName: partition_key
#            KeyType: HASH
#          - AttributeName: sort_key
#            KeyType: RANGE
#        # Set the capacity to auto-scale
#        BillingMode: PAY_PER_REQUEST
#        GlobalSecondaryIndexes:
#        - IndexName: gsiAlbums
#          KeySchema:
#          - AttributeName: sort_key
#            KeyType: HASH
#          - AttributeName: partition_key
#            KeyType: RANGE
#          Projection:
#            ProjectionType: 'ALL'
